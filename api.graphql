### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Adoption {
  adoptee: Pet!
  adopter: User!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input AdoptionCreateManyWithoutAdopterInput {
  connect: [AdoptionWhereUniqueInput!]
  create: [AdoptionCreateWithoutAdopterInput!]
}

input AdoptionCreateWithoutAdopterInput {
  adoptee: PetCreateOneWithoutAdoptionInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input AdoptionListRelationFilter {
  every: AdoptionWhereInput
  none: AdoptionWhereInput
  some: AdoptionWhereInput
}

input AdoptionWhereInput {
  adoptee: PetWhereInput
  adopter: UserWhereInput
  AND: [AdoptionWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [AdoptionWhereInput!]
  OR: [AdoptionWhereInput!]
  petId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AdoptionWhereUniqueInput {
  id: String
}

"""Payload returned if login or signup is successful"""
type AuthPayload {
  """The current JWT token. Use in Authentication header"""
  token: String

  """The logged in user"""
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  adoptPet(pet: PetWhereUniqueInput!): Adoption
  createPet: Pet
  createUser(data: UserCreateInput!): User!

  """Login to an existing account"""
  login(email: String!, password: String!): AuthPayload

  """Signup for an account"""
  signup(data: SignupInput!): AuthPayload
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""A Pet"""
type Pet {
  adoption: Adoption
  createdAt: DateTime!
  id: String!
  name: String
  updatedAt: DateTime!
}

input PetCreateOneWithoutAdoptionInput {
  connect: PetWhereUniqueInput
  create: PetCreateWithoutAdoptionInput
}

input PetCreateWithoutAdoptionInput {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input PetOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input PetWhereInput {
  adoption: AdoptionWhereInput
  AND: [PetWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringNullableFilter
  NOT: [PetWhereInput!]
  OR: [PetWhereInput!]
  updatedAt: DateTimeFilter
}

input PetWhereUniqueInput {
  id: String
}

"""A User Profile"""
type Profile {
  createdAt: DateTime!
  firstName: String!

  """The first and last name of a user"""
  fullName: String
  id: String!
  lastName: String!
  updatedAt: DateTime!
  user: User!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateWithoutUserInput {
  createdAt: DateTime
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ProfileWhereUniqueInput {
  id: String
}

type Query {
  """Returns the currently logged in user"""
  me: User
  pets(after: PetWhereUniqueInput, before: PetWhereUniqueInput, first: Int, last: Int, orderBy: [PetOrderByInput!], where: PetWhereInput): [Pet!]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""A User"""
type User {
  adoptions(after: AdoptionWhereUniqueInput, before: AdoptionWhereUniqueInput, first: Int, last: Int): [Adoption!]!
  createdAt: DateTime!
  email: String
  id: String!
  profile: Profile
  role: Role!
  updatedAt: DateTime!
}

input UserCreateInput {
  adoptions: AdoptionCreateManyWithoutAdopterInput
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  role: Role
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserWhereInput {
  adoptions: AdoptionListRelationFilter
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  profile: ProfileWhereInput
  role: Role
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
